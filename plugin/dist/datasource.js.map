{"version":3,"sources":["../src/datasource.js"],"names":["urlValidationRegex","buildUrlWithParams","url","params","Object","keys","reduce","string","param","buildRequestBody","data","JSON","stringify","formatCurveData","startTime","step","curveData","datapoints","rrddata","map","d","i","filter","f","target","title","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","rawUrl","jsonData","_username","username","_secret","secret","headers","range","host","service","Promise","resolve","site","host_name","service_description","graph_index","metric","specification","data_range","time_range","from","unix","to","doRequest","action","method","then","response","result","start_time","curves","options","targets","hide","all","queryTarget","concat","test","status","message","catch","Error","text","value","hostname","query","key","index","assign","output_format","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\n//TODO: move utilities\nconst buildUrlWithParams = (url, params) => url + Object.keys(params)\n    .reduce((string, param) => `${string}${string ? '&' : '?'}${param}=${params[param]}`, '');\n\nconst buildRequestBody = (data) => `request=${JSON.stringify(data)}`;\n\nconst formatCurveData = (startTime, step) => (curveData) => {\n    const datapoints = curveData.rrddata\n        .map((d, i) => {\n            return [d, (startTime + i * step) * 1000];\n        })\n        .filter((f) => f[0]);\n\n    return {\n        target: curveData.title,\n        datapoints\n    };\n};\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || !target.host || !target.service) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n        const graph_index = +(target.metric || 0);\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data,\n            method: 'POST'\n        })\n            .then((response) => {\n                const {start_time, step, curves} = response.data.result;\n                return curves.map(formatCurveData(start_time, step));\n            });\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return {\n                status: 'error',\n                message: 'Invalid URL format. Please make sure to include protocol and trailing slash. Example: https://checkmk.server/site/',\n                title: 'Error'\n            };\n        }\n\n        return this.doRequest({\n            params: {action: 'get_all_hosts'},\n            method: 'GET',\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return {\n                        status: 'error',\n                        message: 'Could not connect to provided URL',\n                        title: 'Error'\n                    };\n                } else if (!response.data.result) {\n                    return {\n                        status: 'error',\n                        message: response.data,\n                        title: 'Error'\n                    };\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(() => {\n                return {\n                    status: 'error',\n                    message: 'Could not read API response, make sure the URL you provided is correct.',\n                    title: 'Error'\n                };\n            });\n    }\n\n    annotationQuery() {\n        throw new Error('Annotation Support not implemented.');\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery() {\n        return [{text: 'All Sites', value: ''}];\n    }\n\n    hostsQuery() {\n        return this.doRequest({\n            params: {action: 'get_all_hosts'},\n            method: 'GET',\n        })\n            .then((response) => Object.keys(response.data.result)\n                .map((hostname) => ({text: hostname, value: hostname}))\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host}),\n            method: 'POST',\n        })\n            .then((response) => Object.keys(response.data.result)\n                .map((key) => ({text: key, value: key}))\n            );\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data),\n            method: 'POST',\n        })\n            .then((response) => response.data.result.map((metric, index) => ({text: metric.title, value: index})));\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}