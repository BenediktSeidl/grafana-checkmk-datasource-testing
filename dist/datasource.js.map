{"version":3,"sources":["../src/datasource.js"],"names":["metricDivider","urlValidationRegex","buildUrlWithParams","url","params","Object","keys","reduce","string","param","sortByText","a","b","text","buildRequestBody","data","JSON","stringify","getResult","response","result","formatCurveData","startTime","step","curveData","datapoints","rrddata","map","d","i","filter","f","target","title","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","rawUrl","jsonData","_username","username","_secret","secret","headers","range","host","service","metric","graph","Promise","resolve","site","host_name","service_description","graph_index","metric_index","mode","split","isNaN","specification","data_range","time_range","from","unix","to","doRequest","action","method","then","result_code","Error","start_time","curves","options","targets","hide","all","queryTarget","concat","test","status","message","catch","value","sort","sites","query","site_id","hostname","key","serviceOptionsQuery","length","graphIndex","metrics","metricIndex","findIndex","x","index","assign","output_format","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst metricDivider = '.';\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\n//TODO: move utilities\nconst buildUrlWithParams = (url, params) => url + Object.keys(params)\n    .reduce((string, param) => `${string}${string ? '&' : '?'}${param}=${params[param]}`, '');\n\nconst sortByText = (a, b) => a.text > b.text ? 1 : -1;\n\nconst buildRequestBody = (data) => `request=${JSON.stringify(data)}`;\n\nconst getResult = (response) => response.data.result;\n\nconst formatCurveData = (startTime, step) => (curveData) => {\n    const datapoints = curveData.rrddata\n        .map((d, i) => [d, (startTime + i * step) * 1000])\n        .filter((f) => f[0]);\n\n    return {\n        target: curveData.title,\n        datapoints\n    };\n};\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || !target.host || !target.service || (target.metric === '' && target.graph === '')) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split(metricDivider).map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data,\n            method: 'POST'\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error('Error while fetching data');\n                }\n\n                const {start_time, step, curves} = response.data.result;\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [formatCurveData(start_time, step)(curves[metric_index])];\n                }\n\n                return curves.map(formatCurveData(start_time, step));\n            });\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return {\n                status: 'error',\n                message: 'Invalid URL format. Please make sure to include protocol and trailing slash. Example: https://checkmk.server/site/',\n                title: 'Error'\n            };\n        }\n\n        return this.doRequest({\n            params: {action: 'get_host_names'},\n            method: 'GET',\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return {\n                        status: 'error',\n                        message: 'Could not connect to provided URL',\n                        title: 'Error'\n                    };\n                } else if (!response.data.result) {\n                    return {\n                        status: 'error',\n                        message: response.data,\n                        title: 'Error'\n                    };\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(() => {\n                return {\n                    status: 'error',\n                    message: 'Could not read API response, make sure the URL you provided is correct.',\n                    title: 'Error'\n                };\n            });\n    }\n\n    annotationQuery() {\n        throw new Error('Annotation Support not implemented.');\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery() {\n        return this.doRequest({\n            params: {action: 'get_user_sites'},\n            method: 'GET',\n        })\n            .then(getResult)\n            .then((result) => result\n                .map(([value, text]) => ({text, value}))\n                .sort(sortByText)\n            ).then((sites) => [{text: 'All Sites', value: ''}].concat(sites));\n    }\n\n    hostsQuery(query) {\n        const params = {\n            action: 'get_host_names'\n        };\n\n        if(query.site) {\n            params.site_id = query.site;\n        }\n\n        return this.doRequest({\n            params,\n            method: 'GET',\n        })\n            .then(getResult)\n            .then((result) => result\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host}),\n            method: 'POST',\n        })\n            .then(getResult)\n            .then((result) => Object.keys(result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            );\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data),\n            method: 'POST',\n        });\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then(getResult)\n            .then((result) => {\n                if(!result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}${metricDivider}${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}