{"version":3,"sources":["../src/datasource.js"],"names":["urlValidationRegex","buildUrlWithParams","url","params","Object","keys","reduce","string","param","sortByText","a","b","text","buildRequestBody","data","JSON","stringify","formatCurveData","startTime","step","curveData","datapoints","rrddata","map","d","i","filter","f","target","title","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","rawUrl","jsonData","_username","username","_secret","secret","headers","range","host","service","metric","graph","Promise","resolve","site","host_name","service_description","graph_index","metric_index","mode","split","isNaN","specification","data_range","time_range","from","unix","to","doRequest","action","method","then","response","result_code","Error","result","start_time","curves","options","targets","hide","all","queryTarget","concat","test","status","message","catch","value","hostname","sort","query","key","serviceOptionsQuery","length","graphIndex","metrics","metricIndex","findIndex","x","index","assign","output_format","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\n//TODO: move utilities\nconst buildUrlWithParams = (url, params) => url + Object.keys(params)\n    .reduce((string, param) => `${string}${string ? '&' : '?'}${param}=${params[param]}`, '');\n\nconst sortByText = (a, b) => a.text > b.text ? 1 : -1;\n\nconst buildRequestBody = (data) => `request=${JSON.stringify(data)}`;\n\nconst formatCurveData = (startTime, step) => (curveData) => {\n    const datapoints = curveData.rrddata\n        .map((d, i) => {\n            return [d, (startTime + i * step) * 1000];\n        })\n        .filter((f) => f[0]);\n\n    return {\n        target: curveData.title,\n        datapoints\n    };\n};\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || !target.host || !target.service || (target.metric === '' && target.graph === '')) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split('-').map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data,\n            method: 'POST'\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error('Error while fetching data');\n                }\n\n                const {start_time, step, curves} = response.data.result;\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [formatCurveData(start_time, step)(curves[metric_index])];\n                }\n\n                return curves.map(formatCurveData(start_time, step));\n            });\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return {\n                status: 'error',\n                message: 'Invalid URL format. Please make sure to include protocol and trailing slash. Example: https://checkmk.server/site/',\n                title: 'Error'\n            };\n        }\n\n        return this.doRequest({\n            params: {action: 'get_all_hosts'},\n            method: 'GET',\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return {\n                        status: 'error',\n                        message: 'Could not connect to provided URL',\n                        title: 'Error'\n                    };\n                } else if (!response.data.result) {\n                    return {\n                        status: 'error',\n                        message: response.data,\n                        title: 'Error'\n                    };\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(() => {\n                return {\n                    status: 'error',\n                    message: 'Could not read API response, make sure the URL you provided is correct.',\n                    title: 'Error'\n                };\n            });\n    }\n\n    annotationQuery() {\n        throw new Error('Annotation Support not implemented.');\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery() {\n        return [{text: 'All Sites', value: ''}];\n    }\n\n    hostsQuery() {\n        return this.doRequest({\n            params: {action: 'get_all_hosts'},\n            method: 'GET',\n        })\n            .then((response) => Object.keys(response.data.result)\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host}),\n            method: 'POST',\n        })\n            .then((response) => Object.keys(response.data.result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            );\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data),\n            method: 'POST',\n        });\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}-${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}