{"version":3,"sources":["../src/datasource.js"],"names":["metricDivider","urlValidationRegex","getHostTags","target","hostTags","i","GenericDatasource","instanceSettings","backendSrv","templateSrv","type","name","rawUrl","jsonData","url","_username","username","_secret","secret","headers","lastErrors","range","combinedgraph","host","service","metric","graph","Promise","resolve","data","site","host_name","service_description","graph_index","metric_index","mode","queryCombinedTarget","split","map","isNaN","specification","data_range","time_range","from","unix","to","refId","doRequest","params","action","then","response","result_code","Error","result","start_time","step","curves","catch","err","message","context","host_tags","graph_template","presentation","single_infos","datasource","options","targets","filter","hide","all","queryTarget","reduce","d","concat","test","ERROR","FORMAT","status","STATUS","OTHER","title","cancelled","CANCEL","READ","getResult","value","text","sort","sortByText","sites","query","site_id","hostname","Object","keys","key","tag_groups","id","index","find","tags","serviceOptionsQuery","length","graphIndex","metrics","metricIndex","f","findIndex","x","identification","assign","output_format","method","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import ERROR from './utils/errors';\nimport {buildUrlWithParams, buildRequestBody, getResult} from './utils/request';\nimport {sortByText} from './utils/sort';\nimport {formatCurveData} from './utils/data';\n\n/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst metricDivider = '.';\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\n// TODO: move this to utils\nconst getHostTags = (target) => {\n    const hostTags = {};\n\n    for(let i = 0; i <= 2; i++) {\n        if(target[`filter${i}value`] != null && target[`filter${i}value`] != '') {\n            hostTags[`host_tag_${i}_grp`] = target[`filter${i}group`];\n            hostTags[`host_tag_${i}_op`] = target[`filter${i}op`];\n            hostTags[`host_tag_${i}_val`] = target[`filter${i}value`];\n        }\n    }\n\n    return hostTags;\n};\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        this.lastErrors = {};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || (target.combinedgraph === '' && (!target.host || !target.service || (target.metric === '' && target.graph === '')))) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'combined') {\n            return this.queryCombinedTarget(target, range);\n        } else if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split(metricDivider).map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [formatCurveData(start_time, step)(curves[metric_index])];\n                }\n\n                return curves.map(formatCurveData(start_time, step));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    queryCombinedTarget(target, range) {\n        const context = {\n            site: target.site,\n            host_tags: getHostTags(target)\n        };\n\n        const data = buildRequestBody({\n            specification: [\n                'combined',\n                {\n                    context,\n                    graph_template: target.combinedgraph,\n                    presentation: target.presentation,\n                    single_infos: ['host'],\n                    datasource: 'services'\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n                return curves.map(formatCurveData(start_time, step));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    getLastError(refId) {\n        return this.lastErrors[refId];\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return ERROR.FORMAT;\n        }\n\n        return this.doRequest({\n            params: {action: 'get_host_names'}\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return ERROR.STATUS;\n                } else if (!response.data.result) {\n                    return ERROR.OTHER(response.data);\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(({cancelled}) => cancelled ? ERROR.CANCEL : ERROR.READ);\n    }\n\n    annotationQuery() {\n        throw new Error('Annotation Support not implemented.');\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery() {\n        return this.doRequest({\n            params: {action: 'get_user_sites'}\n        })\n            .then(getResult)\n            .then((result) => result\n                .map(([value, text]) => ({text, value}))\n                .sort(sortByText)\n            ).then((sites) => [{text: 'All Sites', value: ''}].concat(sites));\n    }\n\n    hostsQuery(query) {\n        const params = {\n            action: 'get_host_names'\n        };\n\n        if(query.site) {\n            params.site_id = query.site;\n        }\n\n        return this.doRequest({params})\n            .then(getResult)\n            .then((result) => result\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host})\n        })\n            .then(getResult)\n            .then((result) => Object.keys(result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            );\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data)\n        });\n    }\n\n    filterGroupQuery() {\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    filterValueQuery(query, index) {\n        if(!query[`filter${index}group`]) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .find(({id}) => id === query[`filter${index}group`]).tags\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then(getResult)\n            .then((result) => {\n                if(!result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}${metricDivider}${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    combinedGraphsQuery(query) {\n        // TODO: use service and host filtering\n\n        if(!query.presentation) {\n            return Promise.resolve([]);\n        }\n\n        const data = {\n            context: {\n                site: query.site || null,\n                host_tags: getHostTags(query)\n            },\n            datasource: 'services',\n            presentation: query.presentation,\n            single_infos: ['host']\n        };\n\n        return this.doRequest({\n            params: {action: 'get_combined_graph_identifications'},\n            data: buildRequestBody(data)\n        })\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map(({title, identification}) => ({text: title, value: identification[1].graph_template}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.method = options.data == null ? 'GET' : 'POST';\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}