{"version":3,"sources":["../src/datasource.js"],"names":["metricDivider","urlValidationRegex","ignoreAnnotationTypes","getContext","target","context","site","host_tags","usehostregex","hostregex","host_regex","serviceregex","service_regex","GenericDatasource","instanceSettings","backendSrv","templateSrv","type","name","rawUrl","jsonData","url","_username","username","_secret","secret","headers","lastErrors","range","combinedgraph","host","service","metric","graph","Promise","resolve","data","host_name","service_description","graph_index","metric_index","mode","queryCombinedTarget","split","map","i","isNaN","specification","data_range","time_range","from","unix","to","refId","doRequest","params","action","then","response","result_code","Error","result","start_time","step","curves","catch","err","message","graph_template","presentation","single_infos","datasource","options","targets","filter","hide","all","queryTarget","reduce","d","concat","test","ERROR","FORMAT","status","STATUS","OTHER","title","cancelled","CANCEL","READ","annotation","queries","items","availability_timeline","timeline","state","includes","item","Object","assign","time","text","query","disableAll","getResult","value","sort","sortByText","sites","site_id","hostname","keys","key","tag_groups","id","index","find","tags","serviceOptionsQuery","length","graphIndex","metrics","metricIndex","f","findIndex","x","identification","output_format","method","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import ERROR from './utils/errors';\nimport {buildUrlWithParams, buildRequestBody, getResult} from './utils/request';\nimport {sortByText} from './utils/sort';\nimport {formatCurveData, getHostTags} from './utils/data';\n\n/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst metricDivider = '.';\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\nconst ignoreAnnotationTypes = ['ok', 'unmonitored'];\n\nconst getContext = (target) => {\n    const context = {\n        site: target.site,\n        host_tags: getHostTags(target)\n    };\n\n    if(target.usehostregex && target.hostregex) {\n        context.hostregex = {host_regex: target.hostregex};\n    }\n\n    if(target.serviceregex) {\n        context.serviceregex = {service_regex: target.serviceregex};\n    }\n\n    return context;\n};\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        this.lastErrors = {};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || (target.combinedgraph === '' && (!target.host || !target.service || (target.metric === '' && target.graph === '')))) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'combined') {\n            return this.queryCombinedTarget(target, range);\n        } else if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split(metricDivider).map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [formatCurveData(start_time, step)(curves[metric_index])];\n                }\n\n                return curves.map(formatCurveData(start_time, step));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    queryCombinedTarget(target, range) {\n        const data = {\n            specification: [\n                'combined',\n                {\n                    context: getContext(target),\n                    graph_template: target.combinedgraph,\n                    presentation: target.presentation,\n                    single_infos: ['host'],\n                    datasource: 'services'\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        };\n\n        if(!target.usehostregex) {\n            data.specification[1].host_name = target.host;\n        }\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data: buildRequestBody(data)\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n                return curves.map(formatCurveData(start_time, step));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    getLastError(refId) {\n        return this.lastErrors[refId];\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return ERROR.FORMAT;\n        }\n\n        return this.doRequest({\n            params: {action: 'get_host_names'}\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return ERROR.STATUS;\n                } else if (!response.data.result) {\n                    return ERROR.OTHER(response.data);\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(({cancelled}) => cancelled ? ERROR.CANCEL : ERROR.READ);\n    }\n\n    annotationQuery(options) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: options.annotation.queries[0].site,\n                    host_name: options.annotation.queries[0].host,\n                    service_description: options.annotation.queries[0].service\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_annotations'},\n            data: buildRequestBody(data)\n        }).then((result) => {\n            const items = result.data.result.availability_timeline[0].timeline\n                .filter(([, state]) => !ignoreAnnotationTypes.includes(state))\n                .map(([item, state]) => Object.assign(item, {state}));\n\n            return items.map((item) => ({\n                annotation: options,\n                title: `State \"${item.state}\"`,\n                time: item.from * 1000,\n                text: `Host \"${item.host_name}\", Service \"${item.service_description}\" <a href=\"\">test</a>`\n            }));\n        });\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery(query, disableAll = false) {\n        return this.doRequest({\n            params: {action: 'get_user_sites'}\n        })\n            .then(getResult)\n            .then((result) => result\n                .map(([value, text]) => ({text, value}))\n                .sort(sortByText)\n            ).then((sites) => disableAll ? sites : [{text: 'All Sites', value: ''}].concat(sites));\n    }\n\n    hostsQuery(query) {\n        const params = {\n            action: 'get_host_names'\n        };\n\n        if(query.site) {\n            params.site_id = query.site;\n        }\n\n        return this.doRequest({params})\n            .then(getResult)\n            .then((result) => result\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host})\n        })\n            .then(getResult)\n            .then((result) => Object.keys(result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            );\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data)\n        });\n    }\n\n    filterGroupQuery() {\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    filterValueQuery(query, index) {\n        if(!query[`filter${index}group`]) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .find(({id}) => id === query[`filter${index}group`]).tags\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then(getResult)\n            .then((result) => {\n                if(!result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}${metricDivider}${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    combinedGraphsQuery(query) {\n        if(!query.presentation) {\n            return Promise.resolve([]);\n        }\n\n        const data = {\n            context: getContext(query),\n            datasource: 'services',\n            presentation: query.presentation,\n            single_infos: ['host']\n        };\n\n        return this.doRequest({\n            params: {action: 'get_combined_graph_identifications'},\n            data: buildRequestBody(data)\n        })\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map(({title, identification}) => ({text: title, value: identification[1].graph_template}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.method = options.data == null ? 'GET' : 'POST';\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}