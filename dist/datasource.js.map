{"version":3,"sources":["../src/datasource.js"],"names":["metricDivider","urlValidationRegex","getContext","target","context","siteopt","site","host_tags","usehostregex","hostregex","host_regex","host","serviceregex","service_regex","CheckmkDatasource","instanceSettings","backendSrv","templateSrv","type","name","rawUrl","jsonData","url","_username","username","_secret","secret","headers","lastErrors","range","combinedgraph","service","metric","graph","Promise","resolve","data","host_name","service_description","graph_index","metric_index","mode","queryCombinedTarget","split","map","i","isNaN","specification","data_range","time_range","from","unix","to","refId","doRequest","params","action","then","response","result_code","Error","result","start_time","step","curves","format","catch","err","message","graph_template","presentation","single_infos","datasource","options","targets","filter","hide","all","queryTarget","reduce","d","concat","test","ERROR","FORMAT","status","STATUS","OTHER","title","cancelled","CANCEL","READ","annotation","queries","query","useserviceregex","end_time","availability_timelines","length","items","tl","timeline","state","showAnnotations","includes","item","Object","assign","a","baseLink","hostLink","view_name","serviceLink","stateLink","av_mode","tableData","in_downtime","text","tr","td","join","time","disableAll","getResult","value","sort","sortByText","sites","site_id","hostname","keys","key","services","tag_groups","id","index","find","tags","serviceOptionsQuery","graphIndex","metrics","metricIndex","f","findIndex","x","identification","output_format","method","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import ERROR from './utils/errors';\nimport {buildUrlWithParams, buildRequestBody, getResult} from './utils/request';\nimport {sortByText} from './utils/sort';\nimport {formatCurveData, getHostTags} from './utils/data';\n\n/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst metricDivider = '.';\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\nconst getContext = (target) => {\n    const context = {\n        siteopt: {site: target.site},\n        host_tags: getHostTags(target)\n    };\n\n    if(target.usehostregex && target.hostregex) {\n        context.hostregex = {host_regex: target.hostregex};\n    }\n\n    if(!target.usehostregex && target.host) {\n        context.host = {host: target.host};\n    }\n\n    if(target.serviceregex) {\n        context.serviceregex = {service_regex: target.serviceregex};\n    }\n\n    return context;\n};\n\nexport class CheckmkDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        this.lastErrors = {};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || (target.combinedgraph === '' && (!target.host || !target.service || (target.metric === '' && target.graph === '')))) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'combined') {\n            return this.queryCombinedTarget(target, range);\n        } else if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split(metricDivider).map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n                const format = formatCurveData(start_time, step, target.format, target);\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [format(curves[metric_index])];\n                }\n\n                return curves.map(format);\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    queryCombinedTarget(target, range) {\n        const data = {\n            specification: [\n                'combined',\n                {\n                    context: getContext(target),\n                    graph_template: target.combinedgraph,\n                    presentation: target.presentation,\n                    single_infos: ['host'],\n                    datasource: 'services'\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        };\n\n        if(!target.usehostregex) {\n            data.specification[1].host_name = target.host;\n        }\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data: buildRequestBody(data)\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n                return curves.map(formatCurveData(start_time, step, target.format, target));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    getLastError(refId) {\n        return this.lastErrors[refId];\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return ERROR.FORMAT;\n        }\n\n        return this.doRequest({\n            params: {action: 'get_host_names'}\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return ERROR.STATUS;\n                } else if (!response.data.result) {\n                    return ERROR.OTHER(response.data);\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(({cancelled}) => cancelled ? ERROR.CANCEL : ERROR.READ);\n    }\n\n    annotationQuery(options) {\n        const [query] = options.annotation.queries;\n\n        const context = {\n            site: query.site,\n            serviceregex: {service_regex: query.useserviceregex ? query.serviceregex : query.service || '.*'}\n        };\n\n        if(query.usehostregex) {\n            context.hostregex = {host_regex: query.hostregex};\n        } else {\n            context.host = query.host;\n        }\n\n        const data = {\n            context,\n            start_time: options.range.from.unix(),\n            end_time: options.range.to.unix()\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_annotations'},\n            data: buildRequestBody(data)\n        }).then((result) => {\n            if(!result.data.result.availability_timelines) {\n                throw new Error('Annotations are not supported by this Checkmk version.');\n            }\n            if(!result.data.result.availability_timelines.length) {\n                return [];\n            }\n\n            const items = result.data.result.availability_timelines\n                .map((tl) => tl.timeline\n                    .filter(([, state]) => query.showAnnotations.includes(state))\n                    .map(([item, state]) => Object.assign(item, {state}))\n                )\n                .reduce((all, a) => all.concat(a), []);\n\n            const baseLink = `${this.rawUrl}check_mk/view.py`;\n\n            return items.map((item) => {\n                const hostLink = buildUrlWithParams(baseLink, {\n                    host: item.host_name,\n                    site: item.site,\n                    view_name: 'hoststatus'\n                });\n                const serviceLink = buildUrlWithParams(baseLink, {\n                    host: item.host_name,\n                    site: item.site,\n                    service: item.service_description,\n                    view_name: 'service'\n                });\n                const stateLink = buildUrlWithParams(baseLink, {\n                    host: item.host_name,\n                    site: item.site,\n                    service: item.service_description,\n                    view_name: 'service',\n                    mode: 'availability',\n                    av_mode: 'timeline'\n                });\n                const tableData = [\n                    ['Host', `<a href=\"${hostLink}\" target=\"_blank\">${item.host_name}</a>`],\n                    ['Service Description', `<a href=\"${serviceLink}\" target=\"_blank\">${item.service_description}</a>`],\n                    ['State', `<a href=\"${stateLink}\" target=\"_blank\">${item.state}</a>`],\n                    ['In Downtime', item.in_downtime ? 'Yes' : 'No']\n                ];\n\n                const text = `<table>${\n                    tableData\n                        .map((tr) => tr.map((td) => `<td>&nbsp;${td}&nbsp;</td>`).join(''))\n                        .map((tr) => `<tr>${tr}</tr>`)\n                        .join('')\n                }</table>`;\n\n                return {\n                    annotation: options,\n                    time: item.from * 1000,\n                    text\n                };\n            });\n        });\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery(query, disableAll = false) {\n        return this.doRequest({\n            params: {action: 'get_user_sites'}\n        })\n            .then(getResult)\n            .then((result) => result\n                .map(([value, text]) => ({text, value}))\n                .sort(sortByText)\n            )\n            .then((sites) => disableAll ? sites : [{text: 'All Sites', value: ''}].concat(sites));\n    }\n\n    hostsQuery(query) {\n        const params = {\n            action: 'get_host_names'\n        };\n\n        if(query.site) {\n            params.site_id = query.site;\n        }\n\n        return this.doRequest({params})\n            .then(getResult)\n            .then((result) => result\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query, disableAll = false) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host})\n        })\n            .then(getResult)\n            .then((result) => Object.keys(result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            )\n            .then((services) => disableAll ? services : [{text: 'All Services', value: ''}].concat(services));\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data)\n        });\n    }\n\n    filterGroupQuery() {\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    filterValueQuery(query, index) {\n        if(!query[`filter${index}group`]) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({params: {action: 'get_hosttags'}})\n            .then(getResult)\n            .then((result) => result.tag_groups\n                .find(({id}) => id === query[`filter${index}group`]).tags\n                .map(({id, title}) => ({text: title, value: id}))\n                .sort(sortByText)\n            );\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then(getResult)\n            .then((result) => {\n                if(!result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}${metricDivider}${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    combinedGraphsQuery(query) {\n        if(!query.presentation) {\n            return Promise.resolve([]);\n        }\n\n        const data = {\n            context: getContext(query),\n            datasource: 'services',\n            presentation: query.presentation,\n            single_infos: ['host']\n        };\n\n        return this.doRequest({\n            params: {action: 'get_combined_graph_identifications'},\n            data: buildRequestBody(data)\n        })\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map(({title, identification}) => ({text: title, value: identification[1].graph_template}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.method = options.data == null ? 'GET' : 'POST';\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}