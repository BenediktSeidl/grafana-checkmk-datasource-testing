{"version":3,"sources":["../src/datasource.js"],"names":["metricDivider","urlValidationRegex","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","rawUrl","jsonData","url","_username","username","_secret","secret","headers","lastErrors","target","range","host","service","metric","graph","Promise","resolve","data","site","host_name","service_description","graph_index","metric_index","mode","split","map","i","isNaN","specification","data_range","time_range","from","unix","to","refId","doRequest","params","action","method","then","response","result_code","Error","result","start_time","step","curves","catch","err","message","options","targets","filter","hide","all","queryTarget","reduce","d","concat","test","ERROR","FORMAT","status","STATUS","OTHER","title","cancelled","CANCEL","READ","getResult","value","text","sort","sortByText","sites","query","site_id","hostname","Object","keys","key","serviceOptionsQuery","length","graphIndex","metrics","metricIndex","f","findIndex","x","index","assign","output_format","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import ERROR from './utils/errors';\nimport {buildUrlWithParams, buildRequestBody, getResult} from './utils/request';\nimport {sortByText} from './utils/sort';\nimport {formatCurveData} from './utils/data';\n\n/*\n * Grafana requires these methods:\n *\n * query(options)           // used by panels to get data\n * testDatasource()         // used by datasource configuration page to make sure the connection is working\n * metricFindQuery(options) // used by query editor to get metric suggestions.\n * annotationQuery(options) // used by dashboards to get annotations (optional)\n */\n\nconst metricDivider = '.';\nconst urlValidationRegex = /^https?:\\/\\/[^/]*\\/[^/]*\\/$/;\n\nexport class GenericDatasource {\n    // backendSrv, templateSrv are injected - do not rename\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n\n        this.rawUrl = instanceSettings.jsonData.url;\n        this._username = instanceSettings.jsonData.username;\n        this._secret = instanceSettings.jsonData.secret;\n\n        this.headers = {'Content-Type': 'application/x-www-form-urlencoded'};\n\n        this.lastErrors = {};\n    }\n\n    queryTarget(target, {range}) {\n        if(!target || !target.host || !target.service || (target.metric === '' && target.graph === '')) {\n            return Promise.resolve({data: []});\n        }\n\n        const site = target.site || null;\n        const host_name = target.host;\n        const service_description = target.service;\n\n        let graph_index;\n        let metric_index;\n\n        if(target.mode === 'metric') {\n            [graph_index, metric_index] = target.metric.split(metricDivider).map((i) => +i);\n        } else {\n            graph_index = +target.graph;\n        }\n\n        if(isNaN(graph_index)) {\n            return Promise.resolve({data: []});\n        }\n\n        const data = buildRequestBody({\n            specification: [\n                'template',\n                {\n                    site,\n                    host_name,\n                    service_description,\n                    graph_index\n                }\n            ],\n            data_range: {\n                time_range: [\n                    range.from.unix(),\n                    range.to.unix()\n                ]\n            }\n        });\n\n        delete this.lastErrors[target.refId];\n\n        return this.doRequest({\n            params: {action: 'get_graph'},\n            data,\n            method: 'POST'\n        })\n            .then((response) => {\n                if(response.data.result_code !== 0) {\n                    throw new Error(`${response.data.result}`);\n                }\n\n                const {start_time, step, curves} = response.data.result;\n\n                if(metric_index != null) {\n                    // filter for one specific metric\n                    return [formatCurveData(start_time, step)(curves[metric_index])];\n                }\n\n                return curves.map(formatCurveData(start_time, step));\n            })\n            .catch((err) => {\n                this.lastErrors[target.refId] = err.message;\n            });\n    }\n\n    getLastError(refId) {\n        return this.lastErrors[refId];\n    }\n\n    query(options) {\n        const targets = options.targets.filter(({hide}) => !hide);\n        return Promise.all(targets.map((target) => this.queryTarget(target, options)))\n            .then((data) => data.reduce((all, d) => all.concat(d), []))\n            .then((data) => ({data}));\n    }\n\n    testDatasource() {\n        if(!urlValidationRegex.test(this.rawUrl)) {\n            return ERROR.FORMAT;\n        }\n\n        return this.doRequest({\n            params: {action: 'get_host_names'},\n            method: 'GET',\n        })\n            .then((response) => {\n                if(response.status !== 200) {\n                    return ERROR.STATUS;\n                } else if (!response.data.result) {\n                    return ERROR.OTHER(response.data);\n                } else {\n                    return {\n                        status: 'success',\n                        message: 'Data source is working',\n                        title: 'Success'\n                    };\n                }\n            })\n            .catch(({cancelled}) => cancelled ? ERROR.CANCEL : ERROR.READ);\n    }\n\n    annotationQuery() {\n        throw new Error('Annotation Support not implemented.');\n    }\n\n    metricFindQuery() {\n        throw new Error('Template Variable Support not implemented.');\n    }\n\n    sitesQuery() {\n        return this.doRequest({\n            params: {action: 'get_user_sites'},\n            method: 'GET',\n        })\n            .then(getResult)\n            .then((result) => result\n                .map(([value, text]) => ({text, value}))\n                .sort(sortByText)\n            ).then((sites) => [{text: 'All Sites', value: ''}].concat(sites));\n    }\n\n    hostsQuery(query) {\n        const params = {\n            action: 'get_host_names'\n        };\n\n        if(query.site) {\n            params.site_id = query.site;\n        }\n\n        return this.doRequest({\n            params,\n            method: 'GET',\n        })\n            .then(getResult)\n            .then((result) => result\n                .map((hostname) => ({text: hostname, value: hostname}))\n                .sort(sortByText)\n            );\n    }\n\n    servicesQuery(query) {\n        if(!query.host) {\n            return Promise.resolve([]);\n        }\n        return this.doRequest({\n            params: {action: 'get_metrics_of_host'},\n            data: buildRequestBody({hostname: query.host}),\n            method: 'POST',\n        })\n            .then(getResult)\n            .then((result) => Object.keys(result)\n                .map((key) => ({text: key, value: key}))\n                .sort(sortByText)\n            );\n    }\n\n    serviceOptionsQuery(query) {\n        const data = {\n            specification: [\n                'template',\n                {\n                    site: query.site || null,\n                    service_description: query.service,\n                    host_name: query.host\n                }\n            ]\n        };\n\n        return this.doRequest({\n            params: {action: 'get_graph_recipes'},\n            data: buildRequestBody(data),\n            method: 'POST',\n        });\n    }\n\n    metricsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then(getResult)\n            .then((result) => {\n                if(!result.length) {\n                    return [{text: 'no metrics available', value: '-'}];\n                }\n\n                return result\n                    .map((graph, graphIndex) => graph.metrics\n                        .map((metric, metricIndex) => ({text: metric.title, value: `${graphIndex}${metricDivider}${metricIndex}`}))\n                    )\n                    .reduce((all, metrics) => all.concat(metrics), [])\n                    .filter((f, i, all) => all.findIndex((x) => x.text === f.text) === i) // metrics are not necessary unique to one graph, filtering here to make results unique\n                    .sort(sortByText);\n            });\n    }\n\n    graphsQuery(query) {\n        if(!query.host || !query.service) {\n            return Promise.resolve([]);\n        }\n\n        return this.serviceOptionsQuery(query)\n            .then((response) => {\n                if(!response.data.result.length) {\n                    return [{text: 'no graphs available', value: '-'}];\n                }\n\n                return response.data.result\n                    .map((graph, index) => ({text: graph.title, value: index}))\n                    .sort(sortByText);\n            });\n    }\n\n    doRequest(options) {\n        options.url = buildUrlWithParams(`${this.rawUrl}check_mk/webapi.py`, Object.assign({\n            _username: this._username,\n            _secret: this._secret,\n            output_format: 'json',\n        }, options.params));\n\n        delete options.params;\n\n        options.headers = this.headers;\n\n        return this.backendSrv.datasourceRequest(options);\n    }\n}\n"]}